#!/usr/bin/env ruby

require 'optparse'
require 'autotune'

options = { directory: nil, deluxe: false, clean: false }

overview_msg = 'OVERVIEW: A music auto-tagging library using the iTunes API'
usage_msg    = 'USAGE: autotune [options] <directory>'
options_msg  = 'OPTIONS:'

option_parser = OptionParser.new do |opts|
  opts.banner = overview_msg + "\n\n" + usage_msg + "\n\n" + options_msg + "\n"

  clean_help_msg = 'Use clean version of album, if applicable'
  opts.on('-c', '--clean', clean_help_msg) do |clean|
    options[:clean] = true unless clean.nil?
  end

  deluxe_help_msg = 'Use deluxe version of album, if applicable'
  opts.on('-x', '--deluxe', deluxe_help_msg) do |deluxe|
    options[:deluxe] = true unless deluxe.nil?
  end

  opts.on('-h', '--help', 'Displays available options') do
    puts opts
    exit
  end

  opts.on('-v', '--version', 'Displays the version number') do
    puts 'autotune version ' + AutoTune::VERSION
    exit
  end
end

begin
  option_parser.parse!
rescue OptionParser::InvalidOption
  abort 'autotune: error: invalid option(s)'
rescue OptionParser::MissingArgument
  abort 'autotune: error: too few arguments'
end

directory = ARGV.pop if ARGV.length == 1
abort "autotune: error: need to specify one directory to process" unless directory
unless File.exist?(File.expand_path(directory.to_s))
  abort 'autotune: error: directory path given does not exist'
end
options[:directory] = File.expand_path(directory.to_s)

options.each do |_option, argument|
  abort 'autotune: error: too few arguments' if argument.nil?
end

unless AutoTune::Util.os == 'macos'
  abort 'autotune: error: operating system not compatible'
end

paths = AutoTune::Util.paths(options[:directory])

paths.each do |path|
  fingerprint = AutoTune::Obtainer.fingerprint(path)
  results = AutoTune::Obtainer.identify(fingerprint)
  info = AutoTune::Obtainer.get_song_info(results[1], results[0], results[2], options[:clean], options[:deluxe]) if results

  until info
    print "Please enter the name for #{File.basename(path)}: "
    song = STDIN.gets.chomp.to_s

    print "Please enter the album for #{File.basename(path)}: "
    album = STDIN.gets.chomp.to_s

    print "Please enter the artist for #{File.basename(path)}: "
    artist = STDIN.gets.chomp.to_s

    info = AutoTune::Obtainer.get_song_info(album, artist, song, options[:clean], options[:deluxe])
  end

  album_details = AutoTune::Obtainer.get_album_details(info['collectionId'])

  AutoTune::Obtainer.get_artwork(album_details)

  album_artist = AutoTune::Obtainer.get_album_artist(album_details)
  genre_id = AutoTune::Obtainer.get_genre_id(album_details)
  copyright = AutoTune::Obtainer.get_copyright(album_details)

  tune_tags = AutoTune::Util.parse(info).push(album_artist, genre_id, copyright)

  AutoTune::Designator.set_all(tune_tags, path)
end

system('rm /var/tmp/artwork.jpg')
